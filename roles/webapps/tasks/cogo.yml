---
- name: cogo docker network
  docker_network:
    name: cogo

- name: cogo postgres backups container
  docker_container:
    image: postgres:9.6
    name: cogo-db-backups
    state: present
    volumes:
      - /backup

- name: cogo postgres data container
  docker_container:
    image: postgres:9.6
    name: cogo-db-data
    state: present

- name: cogo postgres
  docker_container:
    image: postgres:9.6
    name: cogo-db
    state: started
    env:
      POSTGRES_USER: 'cogo'
      POSTGRES_PASSWORD: "{{ COGO.POSTGRES_PASSWORD }}"
    exposed:
      - 5432
    networks:
      - name: cogo
    volumes_from:
      - cogo-db-backups
      - cogo-db-data

- name: cogo backer-upper
  docker_container:
    image: jmcarbo/docker-postgres-backup
    name: cogo-db-backer-upper
    env:
      INIT_BACKUP: true
      INIT_RESTORE_LATEST: true
      POSTGRES_DB: 'cogo_production'
      POSTGRES_HOST: 'pg'
      POSTGRES_PASSWORD: "{{ COGO.POSTGRES_PASSWORD }}"
      POSTGRES_PORT: '5432'
      POSTGRES_USER: 'cogo'
    networks:
      - name: cogo
        links:
          - "cogo-db:pg"
    volumes_from:
      - cogo-db-backups

- name: cogo redis data container
  docker_container:
    image: redis:3.2
    name: cogo-redis-data
    state: present

- name: cogo redis
  docker_container:
    command: redis-server --requirepass "{{ COGO.REDIS_PASSWORD }}"
    image: redis:3.2
    name: cogo-redis
    state: started
    exposed:
      - 6379
    networks:
      - name: cogo
    volumes_from:
      - cogo-redis-data

- name: cogo rails
  docker_container:
    env_file: cogo.env
    image: aliencyborg/cogo-rails
    name: cogo-rails
    pull: true
    restart: yes
    state: started
    env:
      VIRTUAL_HOST: "cogomn.org,cogomn.com"
      VIRTUAL_PORT: 3000
      LETSENCRYPT_HOST: "cogomn.org,cogomn.com"
      LETSENCRYPT_EMAIL: "thealiencyborg@gmail.com"
    exposed:
      - 3000
    networks:
      - name: cogo
        links:
          - "cogo-db:postgres"
          - "cogo-redis:redis"

- name: cogo sidekiq
  docker_container:
    command: bundle exec sidekiq -C config/sidekiq.yml.erb
    env_file: cogo.env
    image: aliencyborg/cogo-rails
    name: cogo-sidekiq
    restart: yes
    state: started
    networks:
      - name: cogo
        links:
          - "cogo-db:postgres"
          - "cogo-redis:redis"
    volumes_from:
      - cogo-rails

- name: cogo action cable
  docker_container:
    command: bundle exec puma -p 28080 cable/config.ru
    env_file: cogo.env
    image: aliencyborg/cogo-rails
    name: cogo-cable
    state: started
    exposed:
      - 28080
    networks:
      - name: cogo
        links:
          - "cogo-redis:redis"
    volumes_from:
      - cogo-rails

